import numpy as np
import matplotlib.pyplot as plt

xi = 0
xf = 4

x = xi
y = 1

dx = 0.5  #step size
nc = int((xf - xi) / dx) #Iteration

print(f"{x}, {y}")
xa=[0]
ya=[1]
for i in range(nc):
    dydx = -2 * x**3 + 12 * x**2 - 20 * x + 8.5
    y = y + dydx * dx
    x = x + dx
    xa.append(x)
    ya.append(y)
    print(f"{x}, {y}")

plt.plot(xa,ya)

//////////////
from datetime import datetime
import matplotlib.pyplot as plt
from math import exp, sqrt


def runge_kutta(f, x_0, y_0, h):
    """Four step Runge-Kutta method (RK4)
    Solves first order ODEs
    """
    k_0 = f(x_0, y_0)
    k_1 = f(x_0 + h/2, y_0 + h/2 * k_0)
    k_2 = f(x_0 + h/2, y_0 + h/2 * k_1)
    k_3 = f(x_0 + h, y_0 + h * k_2)

    k = 1/6 * (k_0 + 2.0*k_1 + 2.0*k_2 + k_3)

    x_1 = x_0 + h
    y_1 = y_0 + h * k

    return x_1, y_1


def f(x, y):
    return (5*x**2 - y) / (exp(x+y))


if __name__=="__main__":
    # Initial values
    x_0 = 0.0
    y_0 = 1.0

    # Step length
    h = 0.1

    x_values = [x_0]
    y_values = [y_0]

    # Calculate solution
    x = x_0
    y = y_0
    for _ in range(100):
        x, y = runge_kutta(f, x, y, h)
        x_values.append(x)
        y_values.append(y)
        print(x, y)

    # Plot solution
    plt.plot(x_values, y_values)
    plt.show()

